socket.IO 설치시 socket.io/socket.io.js url이 생성 됨
클라이언트에도 socket.io의 적용시 상기 url 주소를 script로 넣어주면 됨 
    script(src="/socket.io/socket.io.js")


ROOM 

user가 웹사이트로 가게 되면  방에 참가하는 등
- 소켓IO는 ROOM rlsmddmf dlal rkwlrh dlTek.

ROOM에 메세지를 보낼 수도 있구요
~

  socket.send 와 socket.emit의  차별점
  websocket은 message만 전달 할 수 있으며, 그 값은 string으로만 가능 했음
  socketIo 에서 emit 함수의 첫 인자는 발생 될 이벤트의 이름을 string // symbol로써 전달
  이후 인자들은 타입과 관계 없이 사용이 가능하며, 
  함수가 들어가는 경우, 프론트에서 생성한 함수를 서버측에서 인자로 받을 수 있음.
  다만 함수는 꼭 인자의 마지막에 넣어야 정상적으로 서버로 전달 됨
  ! 인자로 받는다는것이 백엔드에서 프론트에서 작성한 함수를 사용한다는것과는 다름 
  서버로 전달 된 함수를 서버에서 실행하는 경우,
   함수의 실행과 인자 정보를 클라이언트로 전달 한다고 보면 될 듯
  
  
  클라이언트의 emit으로 전송한 이벤트 명과 
  서버에서 socket.on을 통해 받아오는 이벤트명은 동일해야 함. 
  반대로 서버의 emit과 클라의 socket.on도 이벤트명이  동일해야 함 


ROOM < 실시간으로 정보를 주고 받을 대상자들을 그룹으로 묶어둔 개념? 




Adapter 

> 다른 서버들 사이의 실시간 어플리케이션의 동기화
> 현재 어플은 메모리 단계에서 실행되고 있으며, db에는 별도의 저장을 하지 않음
> 모든 클라이언트에 대해 connection을 열어두어야 함 
> 사용자가 증가하게 되는 경우 서버 하나에서 모든 connection을 감당 할 수 없게 됨 
> 서버를 증설하는 경우, 각각의 클라이언트가 연결되는 서버가 다르게 됨
> 클라이언트가 각각 다른 서버에 연결되어 있는 경우 데이터의 전달이 불가하나
> Adpater를 사용시 

> A클라 > A 서버 > A 어댑터 > DB > B어댑터 > B서버 > B 클라 
> 위와 같은 형식으로 어댑터를 통해서 각각 다른 서버들끼리의 실시간 데이터 전달이 가능

> 어댑터는 현재 어플리케이션에 Room이 얼마나 있는지 알 수 있는 도구이기도 함 
> 현재 어댑터에 연결 된 rooms 중 socket의 고유 아이디를 뜻하는 sids를 제외하면 
> 생성 된 public 룸 socket 아이디를 확인 할 수 있음 

====

WebRTC API

> peer-to-peer 
> 서버를 거치지 않고 사용자들간에 데이터를 전달하지
> 여기서 사용자는 브라우저 겠네요  ㅠ
> 토렌트! 

> 그렇다면 서버가 하는 일은 무엇일가?
> 서버는 브라우저에게 다른 브라우저가 어디에 있는지등의 브라우저 정보를 전달 함
> 브라우저들의 연결은 각각 분리 된 채로 연결이 되며, 이를 Socket.IO를 통해서 연결 할 수 있음


> 
 getUserMedia() 함수를 실행시키고
 a